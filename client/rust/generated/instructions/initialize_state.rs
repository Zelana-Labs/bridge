//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use crate::generated::types::InitializeMyStateV1IxData;
use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
#[derive(Debug)]
pub struct InitializeState {
    /// Fee payer account
    pub payer_acc: solana_pubkey::Pubkey,
    /// New State account
    pub state_acc: solana_pubkey::Pubkey,
    /// Sysvar rent account
    pub sysvar_rent_acc: solana_pubkey::Pubkey,
    /// System program account
    pub system_program_acc: solana_pubkey::Pubkey,
}

impl InitializeState {
    pub fn instruction(
        &self,
        args: InitializeStateInstructionArgs,
    ) -> solana_instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: InitializeStateInstructionArgs,
        remaining_accounts: &[solana_instruction::AccountMeta],
    ) -> solana_instruction::Instruction {
        let mut accounts = Vec::with_capacity(4 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(self.payer_acc, true));
        accounts.push(solana_instruction::AccountMeta::new(self.state_acc, false));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.sysvar_rent_acc,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.system_program_acc,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&InitializeStateInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_instruction::Instruction {
            program_id: crate::SOLANA_PINOCCHIO_STARTER_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct InitializeStateInstructionData {
    discriminator: u8,
}

impl InitializeStateInstructionData {
    pub fn new() -> Self {
        Self { discriminator: 0 }
    }
}

impl Default for InitializeStateInstructionData {
    fn default() -> Self {
        Self::new()
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct InitializeStateInstructionArgs {
    pub initialize_my_state_v1_ix_data: InitializeMyStateV1IxData,
}

/// Instruction builder for `InitializeState`.
///
/// ### Accounts:
///
///   0. `[writable, signer]` payer_acc
///   1. `[writable]` state_acc
///   2. `[]` sysvar_rent_acc
///   3. `[]` system_program_acc
#[derive(Clone, Debug, Default)]
pub struct InitializeStateBuilder {
    payer_acc: Option<solana_pubkey::Pubkey>,
    state_acc: Option<solana_pubkey::Pubkey>,
    sysvar_rent_acc: Option<solana_pubkey::Pubkey>,
    system_program_acc: Option<solana_pubkey::Pubkey>,
    initialize_my_state_v1_ix_data: Option<InitializeMyStateV1IxData>,
    __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl InitializeStateBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    /// Fee payer account
    #[inline(always)]
    pub fn payer_acc(&mut self, payer_acc: solana_pubkey::Pubkey) -> &mut Self {
        self.payer_acc = Some(payer_acc);
        self
    }
    /// New State account
    #[inline(always)]
    pub fn state_acc(&mut self, state_acc: solana_pubkey::Pubkey) -> &mut Self {
        self.state_acc = Some(state_acc);
        self
    }
    /// Sysvar rent account
    #[inline(always)]
    pub fn sysvar_rent_acc(&mut self, sysvar_rent_acc: solana_pubkey::Pubkey) -> &mut Self {
        self.sysvar_rent_acc = Some(sysvar_rent_acc);
        self
    }
    /// System program account
    #[inline(always)]
    pub fn system_program_acc(&mut self, system_program_acc: solana_pubkey::Pubkey) -> &mut Self {
        self.system_program_acc = Some(system_program_acc);
        self
    }
    #[inline(always)]
    pub fn initialize_my_state_v1_ix_data(
        &mut self,
        initialize_my_state_v1_ix_data: InitializeMyStateV1IxData,
    ) -> &mut Self {
        self.initialize_my_state_v1_ix_data = Some(initialize_my_state_v1_ix_data);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_instruction::Instruction {
        let accounts = InitializeState {
            payer_acc: self.payer_acc.expect("payer_acc is not set"),
            state_acc: self.state_acc.expect("state_acc is not set"),
            sysvar_rent_acc: self.sysvar_rent_acc.expect("sysvar_rent_acc is not set"),
            system_program_acc: self
                .system_program_acc
                .expect("system_program_acc is not set"),
        };
        let args = InitializeStateInstructionArgs {
            initialize_my_state_v1_ix_data: self
                .initialize_my_state_v1_ix_data
                .clone()
                .expect("initialize_my_state_v1_ix_data is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `initialize_state` CPI accounts.
pub struct InitializeStateCpiAccounts<'a, 'b> {
    /// Fee payer account
    pub payer_acc: &'b solana_account_info::AccountInfo<'a>,
    /// New State account
    pub state_acc: &'b solana_account_info::AccountInfo<'a>,
    /// Sysvar rent account
    pub sysvar_rent_acc: &'b solana_account_info::AccountInfo<'a>,
    /// System program account
    pub system_program_acc: &'b solana_account_info::AccountInfo<'a>,
}

/// `initialize_state` CPI instruction.
pub struct InitializeStateCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_account_info::AccountInfo<'a>,
    /// Fee payer account
    pub payer_acc: &'b solana_account_info::AccountInfo<'a>,
    /// New State account
    pub state_acc: &'b solana_account_info::AccountInfo<'a>,
    /// Sysvar rent account
    pub sysvar_rent_acc: &'b solana_account_info::AccountInfo<'a>,
    /// System program account
    pub system_program_acc: &'b solana_account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: InitializeStateInstructionArgs,
}

impl<'a, 'b> InitializeStateCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_account_info::AccountInfo<'a>,
        accounts: InitializeStateCpiAccounts<'a, 'b>,
        args: InitializeStateInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            payer_acc: accounts.payer_acc,
            state_acc: accounts.state_acc,
            sysvar_rent_acc: accounts.sysvar_rent_acc,
            system_program_acc: accounts.system_program_acc,
            __args: args,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(4 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(
            *self.payer_acc.key,
            true,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.state_acc.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.sysvar_rent_acc.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.system_program_acc.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&InitializeStateInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_instruction::Instruction {
            program_id: crate::SOLANA_PINOCCHIO_STARTER_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(5 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.payer_acc.clone());
        account_infos.push(self.state_acc.clone());
        account_infos.push(self.sysvar_rent_acc.clone());
        account_infos.push(self.system_program_acc.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_cpi::invoke(&instruction, &account_infos)
        } else {
            solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `InitializeState` via CPI.
///
/// ### Accounts:
///
///   0. `[writable, signer]` payer_acc
///   1. `[writable]` state_acc
///   2. `[]` sysvar_rent_acc
///   3. `[]` system_program_acc
#[derive(Clone, Debug)]
pub struct InitializeStateCpiBuilder<'a, 'b> {
    instruction: Box<InitializeStateCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> InitializeStateCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(InitializeStateCpiBuilderInstruction {
            __program: program,
            payer_acc: None,
            state_acc: None,
            sysvar_rent_acc: None,
            system_program_acc: None,
            initialize_my_state_v1_ix_data: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    /// Fee payer account
    #[inline(always)]
    pub fn payer_acc(&mut self, payer_acc: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.payer_acc = Some(payer_acc);
        self
    }
    /// New State account
    #[inline(always)]
    pub fn state_acc(&mut self, state_acc: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.state_acc = Some(state_acc);
        self
    }
    /// Sysvar rent account
    #[inline(always)]
    pub fn sysvar_rent_acc(
        &mut self,
        sysvar_rent_acc: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.sysvar_rent_acc = Some(sysvar_rent_acc);
        self
    }
    /// System program account
    #[inline(always)]
    pub fn system_program_acc(
        &mut self,
        system_program_acc: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program_acc = Some(system_program_acc);
        self
    }
    #[inline(always)]
    pub fn initialize_my_state_v1_ix_data(
        &mut self,
        initialize_my_state_v1_ix_data: InitializeMyStateV1IxData,
    ) -> &mut Self {
        self.instruction.initialize_my_state_v1_ix_data = Some(initialize_my_state_v1_ix_data);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program_entrypoint::ProgramResult {
        let args = InitializeStateInstructionArgs {
            initialize_my_state_v1_ix_data: self
                .instruction
                .initialize_my_state_v1_ix_data
                .clone()
                .expect("initialize_my_state_v1_ix_data is not set"),
        };
        let instruction = InitializeStateCpi {
            __program: self.instruction.__program,

            payer_acc: self.instruction.payer_acc.expect("payer_acc is not set"),

            state_acc: self.instruction.state_acc.expect("state_acc is not set"),

            sysvar_rent_acc: self
                .instruction
                .sysvar_rent_acc
                .expect("sysvar_rent_acc is not set"),

            system_program_acc: self
                .instruction
                .system_program_acc
                .expect("system_program_acc is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct InitializeStateCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_account_info::AccountInfo<'a>,
    payer_acc: Option<&'b solana_account_info::AccountInfo<'a>>,
    state_acc: Option<&'b solana_account_info::AccountInfo<'a>>,
    sysvar_rent_acc: Option<&'b solana_account_info::AccountInfo<'a>>,
    system_program_acc: Option<&'b solana_account_info::AccountInfo<'a>>,
    initialize_my_state_v1_ix_data: Option<InitializeMyStateV1IxData>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}
