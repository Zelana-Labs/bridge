//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
#[derive(Debug)]
pub struct UpdateState {
    /// Fee payer account
    pub payer_acc: solana_pubkey::Pubkey,
    /// State account
    pub state_acc: solana_pubkey::Pubkey,
}

impl UpdateState {
    pub fn instruction(&self) -> solana_instruction::Instruction {
        self.instruction_with_remaining_accounts(&[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        remaining_accounts: &[solana_instruction::AccountMeta],
    ) -> solana_instruction::Instruction {
        let mut accounts = Vec::with_capacity(2 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(self.payer_acc, true));
        accounts.push(solana_instruction::AccountMeta::new(self.state_acc, false));
        accounts.extend_from_slice(remaining_accounts);
        let data = borsh::to_vec(&UpdateStateInstructionData::new()).unwrap();

        solana_instruction::Instruction {
            program_id: crate::SOLANA_PINOCCHIO_STARTER_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct UpdateStateInstructionData {
    discriminator: u8,
}

impl UpdateStateInstructionData {
    pub fn new() -> Self {
        Self { discriminator: 1 }
    }
}

impl Default for UpdateStateInstructionData {
    fn default() -> Self {
        Self::new()
    }
}

/// Instruction builder for `UpdateState`.
///
/// ### Accounts:
///
///   0. `[writable, signer]` payer_acc
///   1. `[writable]` state_acc
#[derive(Clone, Debug, Default)]
pub struct UpdateStateBuilder {
    payer_acc: Option<solana_pubkey::Pubkey>,
    state_acc: Option<solana_pubkey::Pubkey>,
    __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl UpdateStateBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    /// Fee payer account
    #[inline(always)]
    pub fn payer_acc(&mut self, payer_acc: solana_pubkey::Pubkey) -> &mut Self {
        self.payer_acc = Some(payer_acc);
        self
    }
    /// State account
    #[inline(always)]
    pub fn state_acc(&mut self, state_acc: solana_pubkey::Pubkey) -> &mut Self {
        self.state_acc = Some(state_acc);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_instruction::Instruction {
        let accounts = UpdateState {
            payer_acc: self.payer_acc.expect("payer_acc is not set"),
            state_acc: self.state_acc.expect("state_acc is not set"),
        };

        accounts.instruction_with_remaining_accounts(&self.__remaining_accounts)
    }
}

/// `update_state` CPI accounts.
pub struct UpdateStateCpiAccounts<'a, 'b> {
    /// Fee payer account
    pub payer_acc: &'b solana_account_info::AccountInfo<'a>,
    /// State account
    pub state_acc: &'b solana_account_info::AccountInfo<'a>,
}

/// `update_state` CPI instruction.
pub struct UpdateStateCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_account_info::AccountInfo<'a>,
    /// Fee payer account
    pub payer_acc: &'b solana_account_info::AccountInfo<'a>,
    /// State account
    pub state_acc: &'b solana_account_info::AccountInfo<'a>,
}

impl<'a, 'b> UpdateStateCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_account_info::AccountInfo<'a>,
        accounts: UpdateStateCpiAccounts<'a, 'b>,
    ) -> Self {
        Self {
            __program: program,
            payer_acc: accounts.payer_acc,
            state_acc: accounts.state_acc,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(2 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(
            *self.payer_acc.key,
            true,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.state_acc.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let data = borsh::to_vec(&UpdateStateInstructionData::new()).unwrap();

        let instruction = solana_instruction::Instruction {
            program_id: crate::SOLANA_PINOCCHIO_STARTER_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(3 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.payer_acc.clone());
        account_infos.push(self.state_acc.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_cpi::invoke(&instruction, &account_infos)
        } else {
            solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `UpdateState` via CPI.
///
/// ### Accounts:
///
///   0. `[writable, signer]` payer_acc
///   1. `[writable]` state_acc
#[derive(Clone, Debug)]
pub struct UpdateStateCpiBuilder<'a, 'b> {
    instruction: Box<UpdateStateCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> UpdateStateCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(UpdateStateCpiBuilderInstruction {
            __program: program,
            payer_acc: None,
            state_acc: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    /// Fee payer account
    #[inline(always)]
    pub fn payer_acc(&mut self, payer_acc: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.payer_acc = Some(payer_acc);
        self
    }
    /// State account
    #[inline(always)]
    pub fn state_acc(&mut self, state_acc: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.state_acc = Some(state_acc);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program_entrypoint::ProgramResult {
        let instruction = UpdateStateCpi {
            __program: self.instruction.__program,

            payer_acc: self.instruction.payer_acc.expect("payer_acc is not set"),

            state_acc: self.instruction.state_acc.expect("state_acc is not set"),
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct UpdateStateCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_account_info::AccountInfo<'a>,
    payer_acc: Option<&'b solana_account_info::AccountInfo<'a>>,
    state_acc: Option<&'b solana_account_info::AccountInfo<'a>>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}
