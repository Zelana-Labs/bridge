/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
} from '@solana/kit';

export type DepositReceipt = {
  depositor: Address;
  amount: bigint;
  nonce: bigint;
  ts: bigint;
  bump: number;
  padding: Array<number>;
};

export type DepositReceiptArgs = {
  depositor: Address;
  amount: number | bigint;
  nonce: number | bigint;
  ts: number | bigint;
  bump: number;
  padding: Array<number>;
};

export function getDepositReceiptEncoder(): FixedSizeEncoder<DepositReceiptArgs> {
  return getStructEncoder([
    ['depositor', getAddressEncoder()],
    ['amount', getU64Encoder()],
    ['nonce', getU64Encoder()],
    ['ts', getI64Encoder()],
    ['bump', getU8Encoder()],
    ['padding', getArrayEncoder(getU8Encoder(), { size: 7 })],
  ]);
}

export function getDepositReceiptDecoder(): FixedSizeDecoder<DepositReceipt> {
  return getStructDecoder([
    ['depositor', getAddressDecoder()],
    ['amount', getU64Decoder()],
    ['nonce', getU64Decoder()],
    ['ts', getI64Decoder()],
    ['bump', getU8Decoder()],
    ['padding', getArrayDecoder(getU8Decoder(), { size: 7 })],
  ]);
}

export function getDepositReceiptCodec(): FixedSizeCodec<
  DepositReceiptArgs,
  DepositReceipt
> {
  return combineCodec(getDepositReceiptEncoder(), getDepositReceiptDecoder());
}

export function decodeDepositReceipt<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<DepositReceipt, TAddress>;
export function decodeDepositReceipt<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<DepositReceipt, TAddress>;
export function decodeDepositReceipt<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<DepositReceipt, TAddress> | MaybeAccount<DepositReceipt, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getDepositReceiptDecoder()
  );
}

export async function fetchDepositReceipt<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<DepositReceipt, TAddress>> {
  const maybeAccount = await fetchMaybeDepositReceipt(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeDepositReceipt<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<DepositReceipt, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeDepositReceipt(maybeAccount);
}

export async function fetchAllDepositReceipt(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<DepositReceipt>[]> {
  const maybeAccounts = await fetchAllMaybeDepositReceipt(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeDepositReceipt(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<DepositReceipt>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeDepositReceipt(maybeAccount)
  );
}
