/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  getArrayDecoder,
  getArrayEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
} from '@solana/kit';

export type UsedNullifier = {
  nullifier: Array<number>;
  used: number;
  bump: number;
  padding: Array<number>;
};

export type UsedNullifierArgs = UsedNullifier;

export function getUsedNullifierEncoder(): FixedSizeEncoder<UsedNullifierArgs> {
  return getStructEncoder([
    ['nullifier', getArrayEncoder(getU8Encoder(), { size: 32 })],
    ['used', getU8Encoder()],
    ['bump', getU8Encoder()],
    ['padding', getArrayEncoder(getU8Encoder(), { size: 6 })],
  ]);
}

export function getUsedNullifierDecoder(): FixedSizeDecoder<UsedNullifier> {
  return getStructDecoder([
    ['nullifier', getArrayDecoder(getU8Decoder(), { size: 32 })],
    ['used', getU8Decoder()],
    ['bump', getU8Decoder()],
    ['padding', getArrayDecoder(getU8Decoder(), { size: 6 })],
  ]);
}

export function getUsedNullifierCodec(): FixedSizeCodec<
  UsedNullifierArgs,
  UsedNullifier
> {
  return combineCodec(getUsedNullifierEncoder(), getUsedNullifierDecoder());
}

export function decodeUsedNullifier<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<UsedNullifier, TAddress>;
export function decodeUsedNullifier<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<UsedNullifier, TAddress>;
export function decodeUsedNullifier<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<UsedNullifier, TAddress> | MaybeAccount<UsedNullifier, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getUsedNullifierDecoder()
  );
}

export async function fetchUsedNullifier<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<UsedNullifier, TAddress>> {
  const maybeAccount = await fetchMaybeUsedNullifier(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeUsedNullifier<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<UsedNullifier, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeUsedNullifier(maybeAccount);
}

export async function fetchAllUsedNullifier(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<UsedNullifier>[]> {
  const maybeAccounts = await fetchAllMaybeUsedNullifier(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeUsedNullifier(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<UsedNullifier>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeUsedNullifier(maybeAccount));
}
