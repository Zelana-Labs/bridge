/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { BRIDGE_Z_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  getWithdrawAttestedParamsDecoder,
  getWithdrawAttestedParamsEncoder,
  type WithdrawAttestedParams,
  type WithdrawAttestedParamsArgs,
} from '../types';

export const WITHDRAW_ATTESTED_DISCRIMINATOR = 2;

export function getWithdrawAttestedDiscriminatorBytes() {
  return getU8Encoder().encode(WITHDRAW_ATTESTED_DISCRIMINATOR);
}

export type WithdrawAttestedInstruction<
  TProgram extends string = typeof BRIDGE_Z_PROGRAM_ADDRESS,
  TAccountSequencer extends string | AccountMeta<string> = string,
  TAccountConfig extends string | AccountMeta<string> = string,
  TAccountVault extends string | AccountMeta<string> = string,
  TAccountRecipient extends string | AccountMeta<string> = string,
  TAccountUsedNullifier extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountSequencer extends string
        ? ReadonlySignerAccount<TAccountSequencer> &
            AccountSignerMeta<TAccountSequencer>
        : TAccountSequencer,
      TAccountConfig extends string
        ? ReadonlyAccount<TAccountConfig>
        : TAccountConfig,
      TAccountVault extends string
        ? WritableAccount<TAccountVault>
        : TAccountVault,
      TAccountRecipient extends string
        ? WritableAccount<TAccountRecipient>
        : TAccountRecipient,
      TAccountUsedNullifier extends string
        ? WritableAccount<TAccountUsedNullifier>
        : TAccountUsedNullifier,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type WithdrawAttestedInstructionData = {
  discriminator: number;
  withdrawAttestedParams: WithdrawAttestedParams;
};

export type WithdrawAttestedInstructionDataArgs = {
  withdrawAttestedParams: WithdrawAttestedParamsArgs;
};

export function getWithdrawAttestedInstructionDataEncoder(): FixedSizeEncoder<WithdrawAttestedInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['withdrawAttestedParams', getWithdrawAttestedParamsEncoder()],
    ]),
    (value) => ({ ...value, discriminator: WITHDRAW_ATTESTED_DISCRIMINATOR })
  );
}

export function getWithdrawAttestedInstructionDataDecoder(): FixedSizeDecoder<WithdrawAttestedInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['withdrawAttestedParams', getWithdrawAttestedParamsDecoder()],
  ]);
}

export function getWithdrawAttestedInstructionDataCodec(): FixedSizeCodec<
  WithdrawAttestedInstructionDataArgs,
  WithdrawAttestedInstructionData
> {
  return combineCodec(
    getWithdrawAttestedInstructionDataEncoder(),
    getWithdrawAttestedInstructionDataDecoder()
  );
}

export type WithdrawAttestedInput<
  TAccountSequencer extends string = string,
  TAccountConfig extends string = string,
  TAccountVault extends string = string,
  TAccountRecipient extends string = string,
  TAccountUsedNullifier extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  /** The authorized sequencer signing the withdrawal */
  sequencer: TransactionSigner<TAccountSequencer>;
  /** The bridge's config account */
  config: Address<TAccountConfig>;
  /** The bridge's vault account */
  vault: Address<TAccountVault>;
  /** The account receiving the withdrawn SOL */
  recipient: Address<TAccountRecipient>;
  /** The nullifier PDA to prevent replay attacks */
  usedNullifier: Address<TAccountUsedNullifier>;
  /** System Program */
  systemProgram: Address<TAccountSystemProgram>;
  withdrawAttestedParams: WithdrawAttestedInstructionDataArgs['withdrawAttestedParams'];
};

export function getWithdrawAttestedInstruction<
  TAccountSequencer extends string,
  TAccountConfig extends string,
  TAccountVault extends string,
  TAccountRecipient extends string,
  TAccountUsedNullifier extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof BRIDGE_Z_PROGRAM_ADDRESS,
>(
  input: WithdrawAttestedInput<
    TAccountSequencer,
    TAccountConfig,
    TAccountVault,
    TAccountRecipient,
    TAccountUsedNullifier,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): WithdrawAttestedInstruction<
  TProgramAddress,
  TAccountSequencer,
  TAccountConfig,
  TAccountVault,
  TAccountRecipient,
  TAccountUsedNullifier,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? BRIDGE_Z_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    sequencer: { value: input.sequencer ?? null, isWritable: false },
    config: { value: input.config ?? null, isWritable: false },
    vault: { value: input.vault ?? null, isWritable: true },
    recipient: { value: input.recipient ?? null, isWritable: true },
    usedNullifier: { value: input.usedNullifier ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.sequencer),
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.recipient),
      getAccountMeta(accounts.usedNullifier),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getWithdrawAttestedInstructionDataEncoder().encode(
      args as WithdrawAttestedInstructionDataArgs
    ),
  } as WithdrawAttestedInstruction<
    TProgramAddress,
    TAccountSequencer,
    TAccountConfig,
    TAccountVault,
    TAccountRecipient,
    TAccountUsedNullifier,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedWithdrawAttestedInstruction<
  TProgram extends string = typeof BRIDGE_Z_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** The authorized sequencer signing the withdrawal */
    sequencer: TAccountMetas[0];
    /** The bridge's config account */
    config: TAccountMetas[1];
    /** The bridge's vault account */
    vault: TAccountMetas[2];
    /** The account receiving the withdrawn SOL */
    recipient: TAccountMetas[3];
    /** The nullifier PDA to prevent replay attacks */
    usedNullifier: TAccountMetas[4];
    /** System Program */
    systemProgram: TAccountMetas[5];
  };
  data: WithdrawAttestedInstructionData;
};

export function parseWithdrawAttestedInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedWithdrawAttestedInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 6) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      sequencer: getNextAccount(),
      config: getNextAccount(),
      vault: getNextAccount(),
      recipient: getNextAccount(),
      usedNullifier: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getWithdrawAttestedInstructionDataDecoder().decode(instruction.data),
  };
}
