/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  getU8Encoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  type ParsedDepositInstruction,
  type ParsedInitializeInstruction,
  type ParsedWithdrawAttestedInstruction,
} from '../instructions';

export const BRIDGE_Z_PROGRAM_ADDRESS =
  '95sWqtU9fdm19cvQYu94iKijRuYAv3wLqod1pcsSfYth' as Address<'95sWqtU9fdm19cvQYu94iKijRuYAv3wLqod1pcsSfYth'>;

export enum BridgeZAccount {
  Config,
  DepositReceipt,
  UsedNullifier,
  Vault,
}

export enum BridgeZInstruction {
  Initialize,
  Deposit,
  WithdrawAttested,
}

export function identifyBridgeZInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): BridgeZInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (containsBytes(data, getU8Encoder().encode(0), 0)) {
    return BridgeZInstruction.Initialize;
  }
  if (containsBytes(data, getU8Encoder().encode(1), 0)) {
    return BridgeZInstruction.Deposit;
  }
  if (containsBytes(data, getU8Encoder().encode(2), 0)) {
    return BridgeZInstruction.WithdrawAttested;
  }
  throw new Error(
    'The provided instruction could not be identified as a bridgeZ instruction.'
  );
}

export type ParsedBridgeZInstruction<
  TProgram extends string = '95sWqtU9fdm19cvQYu94iKijRuYAv3wLqod1pcsSfYth',
> =
  | ({
      instructionType: BridgeZInstruction.Initialize;
    } & ParsedInitializeInstruction<TProgram>)
  | ({
      instructionType: BridgeZInstruction.Deposit;
    } & ParsedDepositInstruction<TProgram>)
  | ({
      instructionType: BridgeZInstruction.WithdrawAttested;
    } & ParsedWithdrawAttestedInstruction<TProgram>);
